from pylab import *
from lmfit import minimize, Parameters, Parameter, report_errors
import numpy as np

def get_histogram(var, nbins):
        # histograma
        h       = hist(var, bins = nbins)
        close()                 # para no generar figura
        h_cnts  = h[0]          # counts        n elementos
        h_bound = h[1]          # boundaries    n+1 elementos
        #   
        n       = len(h_cnts)
        h_x     = np.zeros(n)
        for i in range(n):
                h_x[i]  = .5*(h_bound[i] + h_bound[i+1])
        #   
        return [h_cnts, h_x]

def residuals(params, x_data, y_data):
        mu      = params['mu'].value
        sig     = params['sig'].value
        A       = params['A'].value
        #
	diff    = (gauss(x_data, A, mu, sig)  - y_data)**2.
        #print " diff---> %f" % mean(diff)
        return diff

#
def make_fit(data, sems):
        x       = data[0]
        y       = data[1]

	# semillas
        SEM_A   = sems[0]
        SEM_mu  = sems[1]
        SEM_sig = sems[2]

        # creamos el conjunto de parametros a fitear
        params = Parameters()
        params.add('A')
        params.add('mu')
        params.add('sig')

	# propiedades de los parametros a fitear
        params['A'].value       = SEM_A
        params['A'].vary        = True
        """params['A'].min              = 
        params['A'].max         = """

        params['mu'].value      = SEM_mu
        params['mu'].vary       = True
        """params['mu'].min     = 
        params['mu'].max        = """

        params['sig'].value     = SEM_sig
        params['sig'].vary      = True
        """params['sig'].min    = 
        params['sig'].max       ="""

        METHOD  = "leastsq"#"lbfgsb"
        result = minimize(residuals, params, args=(x, y), method=METHOD)

        print " --------> METODO_FITEO: %s" % METHOD
        # mostrar reporte
        report_errors(params)

	# inicializo vector
        par     = np.zeros(3)		
	# guardo parametros fiteados
        par[0]  = result.values['A']
        par[1]  = result.values['mu']
        par[2]  = result.values['sig']
        return par

#
def gauss_normal(x):            # esto tiene integral =1.
        phi     = np.exp(-0.5 * x**2.) / np.sqrt(2.*pi)
        return phi
#
def gauss(x, A, mu, sig):       # esto tmb tiene integral =1.
        return A * (1./sig) * gauss_normal((x - mu) / sig)
#
